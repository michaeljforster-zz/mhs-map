;;;; map.paren

(in-package #:mhs-map)

;;; Utilities

(defun xhr-get-json (url success-function)
  (ps:chain j-query
            (get-j-s-o-n url success-function)
            (fail #'(lambda (jq-x-h-r text-status error-thrown)
                      (alert (+ "Error: " text-status))))))

;; https://developers.google.com/maps/documentation/javascript/3.exp/reference#LatLngBounds
(defun decode-bounds (bounds)
  (let ((south-west (ps:chain bounds (get-south-west)))
        (north-east (ps:chain bounds (get-north-east))))
    (let ((south (ps:chain south-west (lat)))
          (west (ps:chain south-west (lng)))
          (north (ps:chain north-east (lat)))
          (east (ps:chain north-east (lng))))
      (values south west north east))))

;;; Models

(defun -site (s-no s-name m-name s-address st-name s-url lat-lng)
  (setf (ps:@ this s-no) s-no)
  (setf (ps:@ this s-name) s-name)
  (setf (ps:@ this m-name) m-name)
  (setf (ps:@ this s-address) s-address)
  (setf (ps:@ this st-name) st-name)
  (setf (ps:@ this s-url) s-url)
  (setf (ps:@ this lat-lng) lat-lng)
  this)

(defun geometry-point-x (geometry)
  (if (/= (ps:@ geometry type) "Point")
      (throw "Geometry is not a Point")
      (ps:@ geometry coordinates 0)))

(defun geometry-point-y (geometry)
  (if (/= (ps:@ geometry type) "Point")
      (throw "Geometry is not a Point")
      (ps:@ geometry coordinates 1)))

(defun geometry-point-to-lat-lng (geometry)
  (ps:new (ps:chain google
                    maps
                    (-lat-lng (ps:create 'lat (geometry-point-y geometry)
                                         'lng (geometry-point-x geometry))))))

(defun feature-to-site (feature)
  (ps:new (-site
           (ps:@ feature properties s-no)
           (ps:@ feature properties s-name)
           (ps:@ feature properties m-name)
           (ps:@ feature properties s-address)
           (ps:@ feature properties st-name)
           (ps:@ feature properties s-url)
           (geometry-point-to-lat-lng (ps:@ feature geometry)))))

(defun -site-list (url)
  (setf (ps:@ this url) url)
  (setf (ps:@ this sites) (array))
  (setf (ps:@ this subscribers) (array))
  this)

(defun site-list-size (site-list)
  (ps:@ site-list sites length))

(defun site-list-map (site-list fn)
  (ps:chain site-list sites (map fn)))

(defun site-list-do (site-list fn)
  (ps:chain site-list sites (for-each fn)))

(defun site-list-unsubscribe-all (site-list)
  (setf (ps:@ site-list subscribers) (array))
  site-list)

(defun site-list-subscribe-to-populated (site-list fn)
  (ps:chain site-list subscribers (push fn))
  site-list)

(defun site-list-announce-populated (site-list)
  (ps:chain site-list subscribers (for-each #'(lambda (element) (funcall element))))
  site-list)

(defun site-list-populate (site-list features)
  (setf (ps:@ site-list sites) (array))
  (dolist (feature features)
    (ps:chain site-list
              sites
              (push (feature-to-site feature))))
  (site-list-announce-populated site-list)
  site-list)

(defun update-widget (widget)
  (ps:chain widget (update-widget)))

(defun -list-widget (model jqelement)
  (setf (ps:@ this model) model)
  (setf (ps:@ this jqelement) jqelement)
  (setf (ps:@ this update-widget)
        (ps:chain #'(lambda ()
                      (ps:chain this jqelement (empty))
                      (ps:chain this jqelement
                                (html
                                 (ps:who-ps-html
                                  (:ul
                                   (ps:chain (site-list-map (ps:@ this model)
                                                            (ps:chain #'(lambda (site)
                                                                          (ps:who-ps-html
                                                                           (:li (+ (ps:@ site s-no)
                                                                                   " - "
                                                                                   (ps:@ site s-name)))))
                                                                      (bind this)))
                                             (join "")))))))
                  (bind this)))
  this)

(defun site-icon-uri (site)
  (let ((st-name (ps:@ site st-name)))
    (cond ((= st-name "Featured site") "icon_feature.png")
          ((= st-name "Museum/Archives") "icon_museum.png")
          ((= st-name "Building") "icon_building.png")
          ((= st-name "Monument") "icon_monument.png")
          ((= st-name "Cemetery") "icon_cemetery.png")
          ((= st-name "Location") "icon_location.png")
          ((= st-name "Other") "icon_other.png"))))

(defun site-marker-icon (site)
  (ps:create :url (+ *icons-uri* (site-icon-uri site))
             :size (ps:new (ps:chain google maps (-size 32 32)))
             :origin (ps:new (ps:chain google maps (-point 0 0)))
             :anchor (ps:new (ps:chain google maps (-point 16 16)))))

(defun site-link-title (site)
  (let ((s-address (ps:@ site s-address)))
    (+ (ps:@ site s-name)
       ", "
       (ps:@ site m-name)
       (if (= s-address "") "" (+ ", " s-address)))))

(defun site-link-url (site)
  (+ *mhs-base-uri* (ps:@ site s-url)))

(defun map-add-marker (google-map site-info-window site)
  (let ((marker (ps:new
                 (ps:chain google maps
                           (-marker (ps:create :position (ps:@ site lat-lng)
                                               :icon (site-marker-icon site)
                                               :title (ps:@ site s-name)
                                               :map google-map)))))
        (content (ps:who-ps-html
                  (:div :class "site-info-window-content-box"
                        (:div :class "site-info-window-site-name-box"
                              (:a :class "site-info-window-site-link"
                                  :href (site-link-url site)
                                  :target "_blank"
                                  (site-link-title site)))))))
    (ps:chain google maps event
              (add-listener marker
                            "click"
                            #'(lambda (event)
                                (ps:chain site-info-window (set-content content))
                                (ps:chain site-info-window (open google-map marker)))))
    marker))

(defun -map-widget (model jqelement center zoom geolocation-options)
  (setf (ps:@ this model) model)
  (setf (ps:@ this geolocation-options) geolocation-options)
  (setf (ps:@ this geolocation-marker)
        (ps:new (ps:chain google
                          maps
                          (-marker (ps:create :map nil)))))
  (setf (ps:@ this geolocation-watch-id) nil)
  (setf (ps:@ this markers) (array))
  (setf (ps:@ this site-info-window)
        (ps:new (ps:chain google maps (-info-window (ps:create)))))
  (setf (ps:@ this google-map)
        (ps:new (ps:chain google maps
                          (-map (ps:@ jqelement 0)
                                (ps:create :center center :zoom zoom)))))
  (setf (ps:@ this update-widget)
        (ps:chain #'(lambda ()
                      (dolist (marker (ps:@ this markers))
                        (ps:chain marker (set-map nil)))
                      (setf (ps:@ this markers length) 0)
                      (site-list-do (ps:@ this model)
                                    (ps:chain #'(lambda (site)
                                                  (let ((marker (map-add-marker (ps:@ this google-map)
                                                                                (ps:@ this site-info-window)
                                                                                site)))
                                                    (ps:chain this markers (push marker))))
                                              (bind this))))
                  (bind this)))
  this)

(defun map-widget-bounds (map-widget)
  (ps:chain map-widget google-map (get-bounds)))

;; https://developers.google.com/maps/documentation/javascript/events
;;
;; Note:
;; 
;;     Tip: If you're trying to detect a change in
;;     the viewport, be sure to use the specific
;;     bounds_changed event rather than
;;     constituent zoom_changed and center_changed
;;     events. ...
;;
;; However, because bounds_changed appears to fire
;; repeatedly during a pan or resize, we listen
;; for the idle event instead:
;; 
;;     This event is fired when the map becomes
;;     idle after panning or zooming.
(defun map-widget-listen-on-idle (map-widget fn)
  (ps:chain map-widget
            google-map
            (add-listener "idle" #'(lambda (event) (funcall fn map-widget)))))

(defun geolocation-position-to-google-lat-lng (position)
  (let ((lat (ps:@ position coords latitude))
        (lng (ps:@ position coords longitude)))
    (ps:new (ps:chain google maps (-lat-lng (ps:create :lat lat :lng lng))))))

(defun geolocation-success (map-widget position)
  (let ((google-lat-lng (geolocation-position-to-google-lat-lng position)))
    (ps:chain map-widget google-map (set-center google-lat-lng))
    (ps:chain (ps:@ map-widget geolocation-marker) (set-position google-lat-lng))
    (ps:chain console (log (+ "GEOLOCATION SUCCESS: lat-lng=" google-lat-lng)))))

(defun geolocation-error (position-error)
  (ps:chain console (log (+ "GEOLOCATION ERROR: "
                            (ps:@ position-error code)
                            ": "
                            (ps:@ position-error message))))
  (alert (+ "Geolocation Error: "
          (ps:@ position-error code)
          ": "
          (ps:@ position-error message))))

(defun map-widget-start-geolocation (map-widget)
  (if (ps:@ navigator geolocation)
      (progn
        (ps:chain map-widget
                  geolocation-marker
                  (set-map (ps:@ map-widget google-map)))
        (setf (ps:@ map-widget geolocation-watch-id)
              (ps:chain navigator
                        geolocation
                        (watch-position #'(lambda (position) (geolocation-success map-widget position))
                                        #'geolocation-error
                                        (ps:@ map-widget geolocation-options)))))
      (alert "Geolocation is not available.")))

(defun map-widget-stop-geolocation (map-widget)
  (if (ps:@ navigator geolocation)
      (progn
        (ps:chain navigator
                  geolocation
                  (clear-watch (ps:@ map-widget geolocation-watch-id)))
        (setf (ps:@ map geolocation-watch-id) nil)
        (ps:chain map-widget geolocation-marker (set-map nil)))
      (alert "Geolocation is not available.")))

(defvar *site-list* nil)
(defvar *list-widget* nil)
(defvar *map* nil)

(defun initialize ()

  (ps:chain (j-query "#list-view") (hide))
  (ps:chain (j-query "#map-canvas") (show))

  (ps:chain (j-query "#list-button")
            (click #'(lambda ()
                       (ps:chain (j-query "#list-view") (show))
                       (ps:chain (j-query "#map-canvas") (hide)))))

  (ps:chain (j-query "#map-button")
            (click #'(lambda ()
                       (ps:chain (j-query "#list-view") (hide))
                       (ps:chain (j-query "#map-canvas") (show)))))


  (setf *site-list*
        (ps:new (-site-list *features-within-bounds-uri*)))

  (setf *list-widget*
        (ps:new (-list-widget *site-list*
                              (j-query "#list-view"))))

  (site-list-subscribe-to-populated *site-list*
                                    #'(lambda ()
                                        (ps:chain console
                                                  (log (+ "LIST-WIDGET notified "
                                                          (site-list-size *site-list*))))
                                        (update-widget *list-widget*)))

  (setf *map*
        (ps:new (-map-widget *site-list*
                             (j-query "#map-canvas")
                             *default-center*
                             *default-zoom*
                             *geolocation-options*)))

  (site-list-subscribe-to-populated *site-list*
                                    #'(lambda ()
                                        (ps:chain console
                                                  (log (+ "MAP notified "
                                                          (site-list-size *site-list*))))
                                        (update-widget *map*)))
  
  (map-widget-listen-on-idle *map*
                             #'(lambda (map-widget)
                                 (multiple-value-bind (south west north east)
                                     (decode-bounds (map-widget-bounds map-widget))
                                   (xhr-get-json (+ (ps:@ map-widget model url)
                                                    "?south=" south
                                                    "&west=" west
                                                    "&north=" north
                                                    "&east=" east)
                                                 #'(lambda (results)
                                                     (site-list-populate (ps:@ map-widget model)
                                                                         (ps:@ results features)))))))

  )
