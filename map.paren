;;;; map.paren

(in-package #:mhs-map)

(defvar *site-list* nil)
(defvar *list-widget* nil)
(defvar *map* nil)

(defun initialize ()
  (setf *site-list* (ps:new (-site-list *features-uri*)))

  (ps:chain (j-query "#mhs-update-map-btn")
    (click #'(lambda (e)
               (let ((designations (ps:chain (j-query "#mhs-designation-input") (val))))
                 (update-site-list-parameters *site-list*
                                              (ps:chain (j-query "#mhs-st-name-input") (val))
                                              (ps:chain designations (includes "National"))
                                              (ps:chain designations (includes "Provincial"))
                                              (ps:chain designations (includes "Municipal"))
                                              (ps:chain (j-query "#mhs-keyword1-input") (val))
                                              (ps:chain (j-query "#mhs-op2-input") (val))
                                              (ps:chain (j-query "#mhs-keyword2-input") (val))
                                              (ps:chain (j-query "#mhs-op3-input") (val))
                                              (ps:chain (j-query "#mhs-keyword3-input") (val))))
               (let ((within (ps:chain (j-query "#mhs-filter-within-input") (val))))
                 (case within
                   ("map-area"
                    (unless (site-list-map-area-mode-p *site-list*)
                      (set-site-list-map-area-mode *site-list*)
                      (setf (map-widget-center *map*) *default-center*)
                      (setf (map-widget-zoom *map*) *default-zoom*))
                    (update-site-list-bounds *site-list* (map-widget-bounds *map*)))
                   (("100" "1000" "10000" "100000" "1000000")
                    (unless (site-list-geolocation-mode-p *site-list*)
                      (set-site-list-geolocation-mode *site-list*)
                      (setf (map-widget-zoom *map*) 8)
                      ;; Set the distance and let periodic geolocation update center.
                      )
                    (update-site-list-center-distance *site-list* (make-center-distance 0 0 (parse-int within))))
                   (otherwise           ; m-name
                    (unless (site-list-municipality-mode-p *site-list*)
                      (set-site-list-municipality-mode *site-list*))
                    (unless (= (site-list-m-name *site-list*) within)
                      (setf (map-widget-recenter-p *map*) true)
                      (setf (map-widget-zoom *map*) *municipality-mode-zoom*))
                    (update-site-list-m-name *site-list* within)))))))
  
  (setf *list-widget*
        (ps:new (-list-widget *site-list*
                              (j-query "#mhs-list-widget"))))
  (site-list-subscribe-to-populated *site-list*
                                    #'(lambda ()
                                        (ps:chain console
                                          (log (+ "LIST-WIDGET notified "
                                                  (site-list-size *site-list*))))
                                        (update-widget *list-widget*)))

  (setf *map*
        (ps:new (-map-widget *site-list*
                             (j-query "#mhs-map-widget")
                             *default-center*
                             *default-zoom*
                             *geolocation-options*)))
  (site-list-subscribe-to-populated *site-list*
                                    #'(lambda ()
                                        (ps:chain console
                                          (log (+ "MAP notified "
                                                  (site-list-size *site-list*))))
                                        (update-widget *map*)))

  ;; TODO should this be hidden within map-widget? Is there any change
  ;; to listener to be made over life of app?
  ;; NOTE: wait to look at geolocation
  (map-widget-listen-on-idle *map*
                             #'(lambda (map-widget)
                                 (update-site-list-bounds *site-list* (map-widget-bounds map-widget))))

  ;; NOTE: This is the only portable way to ensure that all three
  ;; widgets will be visible at and above the desktop breakpoint. The
  ;; consequence is that the map widget will be displayed by default.
  (ps:chain (j-query window)
    (resize #'(lambda ()
                (ps:chain (j-query "#mhs-search-tab") (toggle-class "active" true))
                (ps:chain (j-query "#mhs-list-tab") (toggle-class "active" false))
                (ps:chain (j-query "#mhs-map-tab") (toggle-class "active" false))
                (ps:chain (j-query "#mhs-search-col") (toggle-class "invisible" false))
                (ps:chain (j-query "#mhs-list-col") (toggle-class "invisible" false))
                (ps:chain (j-query "#mhs-map-col") (toggle-class "invisible" false)))))

  (ps:chain (j-query "#mhs-search-btn")
    (click #'(lambda ()
               (ps:chain (j-query "#mhs-search-tab") (toggle-class "active" true))
               (ps:chain (j-query "#mhs-list-tab") (toggle-class "active" false))
               (ps:chain (j-query "#mhs-map-tab") (toggle-class "active" false))
               (ps:chain (j-query "#mhs-search-col") (toggle-class "invisible" false))
               (ps:chain (j-query "#mhs-list-col") (toggle-class "invisible" true))
               (ps:chain (j-query "#mhs-map-col") (toggle-class "invisible" true)))))
  (ps:chain (j-query "#mhs-list-btn")
    (click #'(lambda ()
               (ps:chain (j-query "#mhs-search-tab") (toggle-class "active" false))
               (ps:chain (j-query "#mhs-list-tab") (toggle-class "active" true))
               (ps:chain (j-query "#mhs-map-tab") (toggle-class "active" false))
               (ps:chain (j-query "#mhs-search-col") (toggle-class "invisible" true))
               (ps:chain (j-query "#mhs-list-col") (toggle-class "invisible" false))
               (ps:chain (j-query "#mhs-map-col") (toggle-class "invisible" true)))))
  (ps:chain (j-query "#mhs-map-btn")
    (click #'(lambda ()
               (ps:chain (j-query "#mhs-search-tab") (toggle-class "active" false))
               (ps:chain (j-query "#mhs-list-tab") (toggle-class "active" false))
               (ps:chain (j-query "#mhs-map-tab") (toggle-class "active" true))
               (ps:chain (j-query "#mhs-search-col") (toggle-class "invisible" true))
               (ps:chain (j-query "#mhs-list-col") (toggle-class "invisible" true))
               (ps:chain (j-query "#mhs-map-col") (toggle-class "invisible" false))))))
