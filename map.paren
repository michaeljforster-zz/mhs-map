;;;; map.paren

(in-package #:mhs-map)

;; TODO need better error logging and handling ...
;; http://api.jquery.com/jQuery.ajax/
(defun xhr-get-json (url success-function)
  (ps:chain j-query
            (get-j-s-o-n url success-function)
            (fail #'(lambda (jq-x-h-r text-status error-thrown)
                      (alert (+ "Error: " text-status))))))

;;; Model

(defun -site (s-no s-name m-name s-address st-name s-url lat-lng)
  (setf (ps:@ this s-no) s-no)
  (setf (ps:@ this s-name) s-name)
  (setf (ps:@ this m-name) m-name)
  (setf (ps:@ this s-address) s-address)
  (setf (ps:@ this st-name) st-name)
  (setf (ps:@ this s-url) s-url)
  (setf (ps:@ this lat-lng) lat-lng)
  this)

(defun feature-to-site (feature)
  (let ((site (ps:new (-site))))
    (setf (ps:@ site s-no) (ps:@ feature properties s-no))
    (setf (ps:@ site s-name) (ps:@ feature properties s-name))
    (setf (ps:@ site m-name) (ps:@ feature properties m-name))
    (setf (ps:@ site s-address) (ps:@ feature properties s-address))
    (setf (ps:@ site st-name) (ps:@ feature properties st-name))
    (setf (ps:@ site s-url) (ps:@ feature properties s-url))
    (setf (ps:@ site lat-lng)
          (ps:new (ps:chain google
                            maps
                            (-lat-lng (ps:create 'lat (ps:@ feature geometry coordinates 1)
                                                 'lng (ps:@ feature geometry coordinates 0))))))
    site))

(defun -sites (url)
  (setf (ps:@ this url) url)
  (setf (ps:@ this sites) (array))
  (setf (ps:@ this subscribers) (array))
  (setf (ps:@ this for-each)
        #'(lambda (fn)
            (ps:chain this sites (for-each fn))))
  (setf (ps:@ this map)
        #'(lambda (fn)
            (ps:chain this sites (map fn))))
  this)

(defun unsubscribe-all (sites)
  (setf (ps:@ this subscribers) (array))
  sites)

(defun subscribe-to-populated (sites fn)
  (ps:chain sites subscribers (push fn))
  sites)

(defun announce-populated (sites)
  (ps:chain sites subscribers (for-each #'(lambda (element) (funcall element sites))))
  sites)

(defun populate (sites)
  ;; TODO again, need better error logging and handling ...
  (xhr-get-json (ps:@ sites url)
                #'(lambda (results)
                    (setf (ps:@ sites sites) (array))
                    (ps:chain results
                              features
                              (for-each #'(lambda (feature)
                                            (ps:chain sites
                                                      sites
                                                      (push (feature-to-site feature))))))
                    (announce-populated sites)
                    sites)))

(defun render (widget jqobject)
  (ps:chain widget (render jqobject)))

(defun -list-widget (model)
  (setf (ps:@ this model) model)
  (setf (ps:@ this render)
        #'(lambda (jqobject)
            (ps:chain jqobject (empty))
            (ps:chain jqobject
                      (html
                       (ps:who-ps-html
                        (:ul
                         ;; TODO isolate this in a renderer for the site model
                         (ps:chain this
                                   model
                                   (map #'(lambda (site)
                                            (ps:who-ps-html
                                             (:li (+ (ps:@ site s-no)
                                                     " - "
                                                     (ps:@ site s-name))))))
                                   (join ""))))))))
  this)




;; TODO google-map-view - subscribe to model announcements and add/delete markers

;; TODO map view - map pan, zoom, etc. should tell model to requery/update

;; TODO search/list view - should tell model to requery/update

;; TODO alternate queries (PLAN.md)


(defun initialize ()

  ;; TODO by default, show map, hide list
  (ps:chain (j-query "#list-view") (show))
  (ps:chain (j-query "#map-canvas") (hide))

  (ps:chain (j-query "#list-button")
            (click #'(lambda ()
                       (ps:chain (j-query "#list-view") (show))
                       (ps:chain (j-query "#map-canvas") (hide)))))

  (ps:chain (j-query "#map-button")
            (click #'(lambda ()
                       (ps:chain (j-query "#list-view") (hide))
                       (ps:chain (j-query "#map-canvas") (show)))))


  (defvar *sites*
    (ps:new (-sites "http://127.0.0.1:4242/mhs-map/features.json?west=49.620877447334585&south=-100.59589233398435&east=50.09805541906053&north=-99.2802795410156")))


  (defvar *list-widget*
    (ps:new (-list-widget *sites*)))

  (subscribe-to-populated *sites*
                          #'(lambda (sites)
                              (render *list-widget* (j-query "#list-view"))))


  ;; TODO (defvar *map-widget*
  ;;   (ps:new (-map-widget *sites*)))

  ;; (subscribe-to-populated *sites*
  ;;                         #'(lambda (sites)
  ;;                             (render *map-widget* (j-query "#map-canvas"))))

  (populate *sites*))




#|
(defvar *map-options* (ps:create :center *current-center* :zoom *current-zoom*))

(defvar *map* nil)

(defvar *site-info-window* (ps:new (ps:chain google maps (-info-window (ps:create)))))

(defun link-control (control-div)
  (setf (ps:@ control-div class-name) "link-control-box")
  (let ((control-ui (ps:chain document (create-element "div"))))
    (setf (ps:@ control-ui class-name) "link-control-outline-box")
    (setf (ps:@ control-ui title) "Click to return to search page")
    (ps:chain control-div (append-child control-ui))
    (let ((control-text (ps:chain document (create-element "div"))))
      (setf (ps:@ control-text class-name) "link-control-content-box")
      (setf (ps:@ control-text inner-h-t-m-l)
            (ps:who-ps-html (:span :class "link-control-content-text" "Search for sites")))
      (ps:chain control-ui (append-child control-text))
      )))

(defun site-type-icon-uri (st-name)
  (cond ((= st-name "Featured site") "icon_feature.png")
        ((= st-name "Museum/Archives") "icon_museum.png")
        ((= st-name "Building") "icon_building.png")
        ((= st-name "Monument") "icon_monument.png")
        ((= st-name "Cemetery") "icon_cemetery.png")
        ((= st-name "Location") "icon_location.png")
        ((= st-name "Other") "icon_other.png")))

(defvar *my-marker* nil)

(defun set-my-marker (map position)
  (when (null *my-marker*)
    (setf *my-marker*
          (ps:new (ps:chain google
                            maps
                            (-marker (ps:create :map map))))))
  (ps:chain *my-marker* (set-position position)))

(defvar *markers* '())

(defun delete-markers ()
  (dolist (marker *markers*)
    (ps:chain marker (set-map nil)))
  (setf *markers* '()))

(defun add-marker (map feature)
  (let ((coordinates (ps:@ feature geometry coordinates))
        (properties (ps:@ feature properties)))
    (let ((lat-lng (ps:new (ps:chain google maps
                                     (-lat-lng (aref coordinates 1)     ; Y is latitude
                                               (aref coordinates 0))))) ; X is longitude
          (s-no (ps:@ properties s-no))
          (s-name (ps:@ properties s-name))
          (m-name (ps:@ properties m-name))
          (s-address (ps:@ properties s-address))
          (st-name (ps:@ properties st-name))
          (s-url (ps:@ properties s-url)))
      (let ((icon (ps:create :url (+ *icons-uri* (site-type-icon-uri st-name))
                             :size (ps:new (ps:chain google maps (-size 32 32)))
                             :origin (ps:new (ps:chain google maps (-point 0 0)))
                             :anchor (ps:new (ps:chain google maps (-point 16 16)))))
            (s (+ s-name ", " m-name (if (= s-address "") "" (+ ", " s-address)))))
        (let ((marker (ps:new
                       (ps:chain google maps
                                 (-marker (ps:create :position lat-lng
                                                     :icon icon
                                                     :title s-name
                                                     :map map)))))
              (content (ps:who-ps-html
                        (:div :class "site-info-window-content-box"
                              (:div :class "site-info-window-site-name-box"
                                    (:a :class "site-info-window-site-link"
                                        :href (+ *mhs-base-uri* s-url)
                                        :target "_blank"
                                        s))))))
          (ps:chain google maps event
                    (add-listener marker
                                  "click"
                                  #'(lambda (event)
                                      (ps:chain *site-info-window* (set-content content))
                                      (ps:chain *site-info-window* (open map marker)))))
          (ps:chain *markers* (push marker)))))))

(defun format-results-info-window-content (center zoom bounds count)
  (+ "Center: " center "<br>"
     "Zoom: " zoom "<br>"
     "Bounds: " bounds "<br>"
     "Sites within bounds:  " count))

;; (let ((results-info-window (ps:new (ps:chain google maps (-info-window (ps:create))))))
;;   (ps:chain results-info-window
;;             (set-content (format-results-info-window-content *current-center*
;;                                                              *current-zoom*
;;                                                              bounds
;;                                                              sites-count)))
;;   (ps:chain results-info-window (set-position *current-center*))
;;   (ps:chain results-info-window (open *map*)))

(defun geolocation-success (position)
  (let ((lat (ps:@ position coords latitude))
        (lng (ps:@ position coords longitude))
        (altitude (ps:@ position coords altitude))
        (accuracy (ps:@ position coords accuracy)))
    (set-my-marker *map* (ps:new (ps:chain google maps (-lat-lng (ps:create :lat lat :lng lng)))))
    (ps:chain console (log (+ "GEOLOCATION SUCCESS: lat=" lat " lng=" lng)))))

(defun geolocation-error (error)
  (ps:chain console (log (+ "GEOLOCATION ERROR: " (ps:@ error code) ": " (ps:@ error message)))))

(defvar *geolocation-options*
  (ps:create
   ;; :enable-high-accuracy 'true
   ;; :maximum-age 10000
   ;; :timeout 27000
   ))

(defvar *watch-id* nil)
(defun initialize ()

  (if (ps:@ navigator geolocation)
      (setf *watch-id*
            (ps:chain
             navigator
             geolocation
             (watch-position #'geolocation-success
                             #'geolocation-error
                             *geolocation-options*)))
      (ps:chain console (log "no geolocation")))
  
  (setf *map*
        (ps:new (ps:chain google maps
                          (-map (ps:chain document
                                          (get-element-by-id "map-canvas"))
                                *map-options*))))

  (let ((control-div (ps:chain document (create-element "div"))))
    (let ((control (ps:new (link-control control-div)))
          (position (ps:@ google maps -control-position "TOP_CENTER")))
      (setf (ps:@ control-div index) 1)
      (let ((foo (ps:getprop *map* 'controls position)))
        (ps:chain foo (push control-div)))))

  ;; https://developers.google.com/maps/documentation/javascript/events
  ;;
  ;; Note:
  ;; 
  ;;     Tip: If you're trying to detect a change in
  ;;     the viewport, be sure to use the specific
  ;;     bounds_changed event rather than
  ;;     constituent zoom_changed and center_changed
  ;;     events. ...
  ;;
  ;; However, because bounds_changed appears to fire
  ;; repeatedly during a pan or resize, we listen
  ;; for the idle event instead:
  ;; 
  ;;     This event is fired when the map becomes
  ;;     idle after panning or zooming.
  (ps:chain *map* (add-listener "idle"
                                #'(lambda ()
                                    (setf *current-center* (ps:chain *map* (get-center)))
                                    (setf *current-zoom* (ps:chain *map* (get-zoom)))
                                    (let ((bounds (ps:chain *map* (get-bounds))))
                                      (let ((south-west (ps:chain bounds (get-south-west)))
                                            (north-east (ps:chain bounds (get-north-east))))
                                        (let ((south (ps:chain south-west (lng)))
                                              (west (ps:chain south-west (lat)))
                                              (north (ps:chain north-east (lng)))
                                              (east (ps:chain north-east (lat))))
                                          ;; TODO again, need better error logging and handling ...
                                          (xhr-get-json (+ *features-json-uri*
                                                           "?south=" south
                                                           "&west=" west
                                                           "&north=" north
                                                           "&east=" east)
                                                        #'(lambda (results)
                                                            (ps:chain console (log "Deleting markers"))
                                                            (delete-markers)
                                                            (let ((sites-count (ps:@ results features length)))
                                                              (ps:chain console (log (+ "Populating markers: " sites-count " center=" *current-center* " zoom=" *current-zoom* " bounds=" bounds)))
                                                              ;; (dolist (feature (ps:@ results features))
                                                              ;;   (add-marker *map* feature))
                                                              ))))))))))
|#
