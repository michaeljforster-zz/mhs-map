;;;; map.paren

(in-package #:mhs-map)

;;; Utilities

;; TODO need better error logging and handling ...
;; http://api.jquery.com/jQuery.ajax/
(defun xhr-get-json (url success-function)
  (ps:chain j-query
            (get-j-s-o-n url success-function)
            (fail #'(lambda (jq-x-h-r text-status error-thrown)
                      (alert (+ "Error: " text-status))))))

;; https://developers.google.com/maps/documentation/javascript/3.exp/reference#LatLngBounds
(defun decode-bounds (bounds)
  (let ((south-west (ps:chain bounds (get-south-west)))
        (north-east (ps:chain bounds (get-north-east))))
    (let ((south (ps:chain south-west (lat)))
          (west (ps:chain south-west (lng)))
          (north (ps:chain north-east (lat)))
          (east (ps:chain north-east (lng))))
      ;; TODO REMOVE...
      (ps:chain console (log (+ "BOUNDS: " bounds
                                " SOUTH-EAST: " south-west
                                " SOUTH: " south
                                " WEST: " west
                                " NORTH-EAST: " north-east
                                " NORTH: " north
                                " EAST: " east)))
      (values south west north east))))

;;; Models

(defun -site (s-no s-name m-name s-address st-name s-url lat-lng)
  (setf (ps:@ this s-no) s-no)
  (setf (ps:@ this s-name) s-name)
  (setf (ps:@ this m-name) m-name)
  (setf (ps:@ this s-address) s-address)
  (setf (ps:@ this st-name) st-name)
  (setf (ps:@ this s-url) s-url)
  (setf (ps:@ this lat-lng) lat-lng)
  this)

(defun geometry-point-x (geometry)
  (if (/= (ps:@ geometry type) "Point")
      (throw "Geometry is not a Point")
      (ps:@ geometry coordinates 0)))

(defun geometry-point-y (geometry)
  (if (/= (ps:@ geometry type) "Point")
      (throw "Geometry is not a Point")
      (ps:@ geometry coordinates 1)))

(defun geometry-point-to-lat-lng (geometry)
  (ps:new (ps:chain google
                    maps
                    (-lat-lng (ps:create 'lat (geometry-point-y geometry)
                                         'lng (geometry-point-x geometry))))))

(defun feature-to-site (feature)
  (ps:new (-site
           (ps:@ feature properties s-no)
           (ps:@ feature properties s-name)
           (ps:@ feature properties m-name)
           (ps:@ feature properties s-address)
           (ps:@ feature properties st-name)
           (ps:@ feature properties s-url)
           (geometry-point-to-lat-lng (ps:@ feature geometry)))))

(defun -sites (url)
  (setf (ps:@ this url) url)
  (setf (ps:@ this sites) (array))
  (setf (ps:@ this subscribers) (array))
  this)

(defun sites-unsubscribe-all (sites)
  (setf (ps:@ this subscribers) (array))
  sites)

(defun sites-subscribe-to-populated (sites fn)
  (ps:chain sites subscribers (push fn))
  sites)

(defun sites-announce-populated (sites)
  (ps:chain sites subscribers (for-each #'(lambda (element) (funcall element))))
  sites)

;; TODO alternate queries (PLAN.md) ...
(defun sites-populate (sites south west north east)
  ;; TODO again, need better error logging and handling ...
  (xhr-get-json (+ (ps:@ sites url)
                   "?south=" south
                   "&west=" west
                   "&north=" north
                   "&east=" east)
                #'(lambda (results)
                    (setf (ps:@ sites sites) (array))
                    (ps:chain results
                              features
                              (for-each #'(lambda (feature)
                                            (ps:chain sites
                                                      sites
                                                      (push (feature-to-site feature))))))
                    (sites-announce-populated sites)
                    sites)))


;; (defun log-foo ()
;;   (let ((sites-count (ps:@ results features length)))
;;     (ps:chain console (log (+ "Populating markers: " sites-count " center=" *current-center* " zoom=" *current-zoom* " bounds=" bounds)))

;; https://developers.google.com/maps/documentation/javascript/events
;;
;; Note:
;; 
;;     Tip: If you're trying to detect a change in
;;     the viewport, be sure to use the specific
;;     bounds_changed event rather than
;;     constituent zoom_changed and center_changed
;;     events. ...
;;
;; However, because bounds_changed appears to fire
;; repeatedly during a pan or resize, we listen
;; for the idle event instead:
;; 
;;     This event is fired when the map becomes
;;     idle after panning or zooming.



;; TODO search/list view - should tell model to requery/update

(defun update-widget (widget)
  (ps:chain widget (update-widget)))

(defun -list-widget (model jqelement)
  (setf (ps:@ this model) model)
  (setf (ps:@ this jqelement) jqelement)
  (setf (ps:@ this update-widget)
        #'(lambda ()
            (ps:chain this jqelement (empty))
            (ps:chain this jqelement
                      (html
                       (ps:who-ps-html
                        (:ul
                         ;; TODO isolate this in a renderer for the site model
                         (ps:chain this
                                   model
                                   sites
                                   (map #'(lambda (site)
                                            (ps:who-ps-html
                                             (:li (+ (ps:@ site s-no)
                                                     " - "
                                                     (ps:@ site s-name))))))
                                   (join ""))))))))
  this)

(defun site-icon-uri (site)
  (let ((st-name (ps:@ site st-name)))
    (cond ((= st-name "Featured site") "icon_feature.png")
          ((= st-name "Museum/Archives") "icon_museum.png")
          ((= st-name "Building") "icon_building.png")
          ((= st-name "Monument") "icon_monument.png")
          ((= st-name "Cemetery") "icon_cemetery.png")
          ((= st-name "Location") "icon_location.png")
          ((= st-name "Other") "icon_other.png"))))

(defun site-marker-icon (site)
  (ps:create :url (+ *icons-uri* (site-icon-uri site))
             :size (ps:new (ps:chain google maps (-size 32 32)))
             :origin (ps:new (ps:chain google maps (-point 0 0)))
             :anchor (ps:new (ps:chain google maps (-point 16 16)))))

(defun site-link-title (site)
  (let ((s-address (ps:@ site s-address)))
    (+ (ps:@ site s-name)
       ", "
       (ps:@ site m-name)
       (if (= s-address "") "" (+ ", " s-address)))))

(defun site-link-url (site)
  (+ *mhs-base-uri* (ps:@ site s-url)))

(defun map-add-marker (google-map site-info-window site)
  (let ((marker (ps:new
                 (ps:chain google maps
                           (-marker (ps:create :position (ps:@ site lat-lng)
                                               :icon (site-marker-icon site)
                                               :title (ps:@ site s-name)
                                               :map google-map)))))
        (content (ps:who-ps-html
                  (:div :class "site-info-window-content-box"
                        (:div :class "site-info-window-site-name-box"
                              (:a :class "site-info-window-site-link"
                                  :href (site-link-url site)
                                  :target "_blank"
                                  (site-link-title site)))))))
    (ps:chain google maps event
              (add-listener marker
                            "click"
                            #'(lambda (event)
                                (ps:chain site-info-window (set-content content))
                                (ps:chain site-info-window (open google-map marker)))))
    marker))

(defun -map-widget (model jqelement center zoom geolocation-options)
  (setf (ps:@ this model) model)
  (setf (ps:@ this geolocation-options) geolocation-options)
  (setf (ps:@ this geolocation-marker)
        (ps:new (ps:chain google
                          maps
                          (-marker (ps:create :map nil)))))
  (setf (ps:@ this geolocation-watch-id) nil)
  (setf (ps:@ this markers) (array))
  (setf (ps:@ this site-info-window)
        (ps:new (ps:chain google maps (-info-window (ps:create)))))
  (setf (ps:@ this google-map)
        (ps:new (ps:chain google maps
                          (-map (ps:@ jqelement 0)
                                (ps:create :center center :zoom zoom)))))
  (setf (ps:@ this update-widget)
        #'(lambda ()
            (dolist (marker (ps:@ this markers))
              (ps:chain marker (set-map nil)))
            (setf (ps:@ this markers length) 0)
            (dolist (site (ps:@ this model sites))
              (let ((marker (map-add-marker (ps:@ this google-map)
                                            (ps:@ this site-info-window)
                                            site)))
                (ps:chain this markers (push marker))))))
  this)

(defun map-widget-start-updating-markers (map-widget)
  (ps:chain map-widget
            google-map
            (add-listener "idle"
                          #'(lambda ()
                              (multiple-value-bind (south west north east)
                                  (decode-bounds (ps:chain *map* google-map (get-bounds)))
                                (sites-populate *sites* south west north east))))))

;; TODO refactor
(defun geolocation-success (map-widget position)
  (let ((lat (ps:@ position coords latitude))
        (lng (ps:@ position coords longitude)))
    (let ((position (ps:new (ps:chain google maps (-lat-lng (ps:create :lat lat :lng lng))))))
      (ps:chain (ps:@ map-widget geolocation-marker) (set-position position))
      (ps:chain console (log (+ "GEOLOCATION SUCCESS: lat=" lat " lng=" lng " postion=" position))))))

;; TODO refactor
(defun geolocation-error (position-error)
  (ps:chain console (log (+ "GEOLOCATION ERROR: "
                            (ps:@ error code)
                            ": "
                            (ps:@ error message))))
  (alert (+ "Geolocation Error: "
            (ps:@ error code)
            ": "
            (ps:@ error message))))

;; TODO refactor
(defun map-widget-start-geolocation (map-widget)
  (if (ps:@ navigator geolocation)
      (progn
        (ps:chain map-widget
                  geolocation-marker
                  (set-map (ps:@ map-widget google-map)))
        (setf (ps:@ map-widget geolocation-watch-id)
              (ps:chain navigator
                        geolocation
                        (watch-position #'(lambda (position) (geolocation-success map-widget position))
                                        #'geolocation-error
                                        (ps:@ map-widget geolocation-options)))))
      (alert "Geolocation is not available.")))

;; TODO refactor
(defun map-widget-stop-geolocation (map-widget)
  (if (ps:@ navigator geolocation)
      (progn
        (ps:chain navigator
                  geolocation
                  (clear-watch (ps:@ map-widget geolocation-watch-id)))
        (setf (ps:@ map geolocation-watch-id) nil)
        (ps:chain map-widget geolocation-marker (set-map nil)))
      (alert "Geolocation is not available.")))

;; TODO
;; (let ((control-div (ps:chain document (create-element "div"))))
;;   (let ((control (ps:new (link-control control-div)))
;;         (position (ps:@ google maps -control-position "TOP_CENTER")))
;;     (setf (ps:@ control-div index) 1)
;;     (let ((foo (ps:getprop *map* 'controls position)))
;;       (ps:chain foo (push control-div)))))
;;
;; (defun link-control (control-div)
;;   (setf (ps:@ control-div class-name) "link-control-box")
;;   (let ((control-ui (ps:chain document (create-element "div"))))
;;     (setf (ps:@ control-ui class-name) "link-control-outline-box")
;;     (setf (ps:@ control-ui title) "Click to return to search page")
;;     (ps:chain control-div (append-child control-ui))
;;     (let ((control-text (ps:chain document (create-element "div"))))
;;       (setf (ps:@ control-text class-name) "link-control-content-box")
;;       (setf (ps:@ control-text inner-h-t-m-l)
;;             (ps:who-ps-html (:span :class "link-control-content-text" "Search for sites")))
;;       (ps:chain control-ui (append-child control-text))
;;       )))



(defvar *sites* nil)
(defvar *list-widget* nil)
(defvar *map* nil)

(defun initialize ()

  (ps:chain (j-query "#list-view") (hide))
  (ps:chain (j-query "#map-canvas") (show))

  (ps:chain (j-query "#list-button")
            (click #'(lambda ()
                       (ps:chain (j-query "#list-view") (show))
                       (ps:chain (j-query "#map-canvas") (hide)))))

  (ps:chain (j-query "#map-button")
            (click #'(lambda ()
                       (ps:chain (j-query "#list-view") (hide))
                       (ps:chain (j-query "#map-canvas") (show)))))

  (setf *sites*
        (ps:new (-sites *features-json-uri*)))

  (setf *list-widget*
        (ps:new (-list-widget *sites*
                              (j-query "#list-view"))))

  (sites-subscribe-to-populated *sites*
                                #'(lambda ()
                                    (ps:chain console (log (+ "LIST-WIDGET notified " (ps:@ *sites* sites length))))
                                    (update-widget *list-widget*)))

  (setf *map*
        (ps:new (-map-widget *sites*
                             (j-query "#map-canvas")
                             *current-center*
                             *current-zoom*
                             *geolocation-options*)))

  (sites-subscribe-to-populated *sites*
                                #'(lambda ()
                                    (ps:chain console (log (+ "MAP notified " (ps:@ *sites* sites length))))
                                    (update-widget *map*)))
                                     
  (map-widget-start-updating-markers *map*)

  ;; TODO to make the map follow on geolocation, we'll need to--in the
  ;; geolocation-success function--check to see if the point has moved
  ;; out of the map bounds and, if so, re-center the map on the point.
  (map-widget-start-geolocation *map*))
