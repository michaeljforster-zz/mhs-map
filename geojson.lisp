;;;; geojson.lisp

(in-package #:mhs-map)

(defstruct point x y)

(defun geojson-encode-point (point stream)
  (json:with-object (stream)
    (json:encode-object-member :type "Point" stream)
    (json:as-object-member (:coordinates stream)
      (json:with-array (stream)
        (json:encode-array-member (point-x point) stream)
        (json:encode-array-member (point-y point) stream)))))

(defun geojson-encode-site (site stream)
  (json:with-object (stream)
    (json:encode-object-member :type "Feature" stream)
    (json:as-object-member (:geometry stream)
      (geojson-encode-point (make-point :x (site-s-lng site)
                                        :y (site-s-lat site))
                            stream))
    (json:as-object-member (:properties stream)
      (json:with-object (stream)
        (json:encode-object-member :s-no (site-s-no site) stream)
        (json:encode-object-member :s-name (site-s-name site) stream)
        (json:encode-object-member :m-name (site-m-name site) stream)
        (json:encode-object-member :s-address (site-s-address site) stream)
        (json:encode-object-member :st-name (site-st-name site) stream)
        (json:encode-object-member :s-url (princ-to-string (site-s-url site)) stream)))))

(defun geojson-encode-sites (sites centroid stream)
  (json:with-object (stream)
    (if (null centroid)
        (json:encode-object-member :centroid nil stream)
        (json:as-object-member (:centroid stream)
          (json:with-object (stream)
            (json:encode-object-member :type "Feature" stream)
            (json:as-object-member (:geometry stream)
              (geojson-encode-point centroid stream)))))
    (json:as-object-member (:sites stream)
      (json:with-object (stream)
        (json:encode-object-member :type "FeatureCollection" stream)
        (json:as-object-member (:features stream)
          (json:with-array (stream)
            (dolist (site sites)
              (json:as-array-member (stream)
                (geojson-encode-site site stream)))))))))
